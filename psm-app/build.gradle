
buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/djmijares/gradle-plugins' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.github.jacobono:gradle-jaxb-plugin:1.3.6'
        classpath 'kr.motd.gradle:sphinx-gradle-plugin:1.0.5'
        classpath 'net.serenity-bdd:serenity-gradle-plugin:1.4.0'
    }
}

def jbpm_version = '5.4.0.Final'
def spring_core_version = '4.3.12.RELEASE'
def spring_security_version = '4.2.3.RELEASE'
def serenity_version = '1.5.5'

// These libraries are known to be used, since they are required during compile
// or on immediate deployment
ext.libs = [
    commons_codec: 'commons-codec:commons-codec:1.11',
    commons_fileupload: 'commons-fileupload:commons-fileupload:1.3.3',
    commons_io: 'commons-io:commons-io:2.6',
    commons_lang: 'commons-lang:commons-lang:2.6',
    commons_lang3: 'org.apache.commons:commons-lang3:3.7',
    hapi_fhir: 'ca.uhn.hapi.fhir:hapi-fhir-client-okhttp:2.5',
    handlebars: 'com.github.jknack:handlebars:4.0.6',
    handlebars_springmvc: 'com.github.jknack:handlebars-springmvc:4.0.6',
    itext: 'com.lowagie:itext:2.1.7',
    jasypt: 'org.jasypt:jasypt:1.9.0',
    jbpm_human_task_core: dependencies.create("org.jbpm:jbpm-human-task-core:${jbpm_version}") {
        exclude group: 'javax.transaction'
        exclude group: 'org.apache.cxf'
        exclude group: 'org.hibernate.javax.persistence'
    },
    jbpm_persistence_jpa: dependencies.create("org.jbpm:jbpm-persistence-jpa:${jbpm_version}") {
       exclude group: 'javax.transaction'
       exclude group: 'org.hibernate'
       exclude group: 'org.hibernate.javax.persistence'
    },
    spring_beans: "org.springframework:spring-beans:${spring_core_version}",
    spring_context: "org.springframework:spring-context:${spring_core_version}",
    spring_jdbc: "org.springframework:spring-jdbc:${spring_core_version}",
    spring_ldap: 'org.springframework.ldap:spring-ldap-core:2.0.2.RELEASE',
    spring_security_acl: "org.springframework.security:spring-security-acl:${spring_security_version}",
    spring_security_aspects: "org.springframework.security:spring-security-aspects:${spring_security_version}",
    spring_security_config: "org.springframework.security:spring-security-config:${spring_security_version}",
    spring_security_core: "org.springframework.security:spring-security-core:${spring_security_version}",
    spring_security_ldap: "org.springframework.security:spring-security-ldap:${spring_security_version}",
    spring_security_taglibs: "org.springframework.security:spring-security-taglibs:${spring_security_version}",
    spring_webmvc: "org.springframework:spring-webmvc:${spring_core_version}",
    velocity: 'org.apache.velocity:velocity:1.7',
]

// These libraries were included in the original project, but it is unclear if they
// are required.  We know for sure that SOME of them are loaded during runtime, but
// need to spend some time investigating one by one.
List runtime_libs = [
    'net.sourceforge.jexcelapi:jxl:2.6.10',
    'org.codehaus.jackson:jackson-mapper-asl:1.9.13',
    'org.codehaus.janino:janino:2.5.15',
    'org.slf4j:slf4j-api:1.6.4',
    'org.slf4j:slf4j-jdk14:1.6.4',
]

allprojects {
    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion = '8.2'
        configFile = new File(rootDir, 'checkstyle.xml')
    }
}

[
    'cms-business-model',
    'cms-business-process',
    'cms-portal-services',
    'cms-web',
    'services',
].each { name ->
    project(":$name") {
        apply plugin: 'groovy'

        repositories {
            mavenCentral()
        }

        dependencies {
            testCompile 'org.codehaus.groovy:groovy-all:2.4.10'
            testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
        }
    }
}

project(':services') {
    apply plugin: 'java'

    dependencies {
        compile libs.commons_codec
        compile libs.commons_lang
        compile libs.commons_lang3
        compile libs.itext
        compile libs.jasypt
        compile libs.jbpm_human_task_core
        compile libs.velocity
        compile fileTree(dir: '../cms-portal-services/lib', include: '*.jar')
        compile project(path: ':cms-business-model', configuration: 'archives')
        compile fileTree(dir: '../../../wildfly-10.1.0.Final/modules/system/layers/base/javax')
        compile fileTree(dir: '../../../wildfly-10.1.0.Final/modules/system/layers/base/org/hibernate')
        compile fileTree(dir: '../../../wildfly-10.1.0.Final/modules/system/layers/base/org/codehaus/jackson')
        runtime runtime_libs
    }
    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }
    }
}

project(':cms-business-process') {
    apply plugin: 'java'

    dependencies {
        compile project(path: ':services', configuration: 'archives')
        compile project(path: ':cms-business-model', configuration: 'archives')
        compile libs.commons_codec
        compile libs.commons_io
        compile libs.commons_lang
        compile libs.commons_lang3
        compile libs.hapi_fhir
        compile libs.itext
        compile libs.jbpm_human_task_core
        compile libs.spring_security_core
        compile libs.velocity
        compile fileTree(dir: '../cms-portal-services/lib', include: '*.jar')
        compile fileTree(dir: '../../../wildfly-10.1.0.Final/modules/system/layers/base/javax')
        compile fileTree(dir: '../../../wildfly-10.1.0.Final/modules/system/layers/base/org/hibernate')
        compile fileTree(dir: '../../../wildfly-10.1.0.Final/modules/system/layers/base/org/codehaus/jackson')
        runtime libs.jbpm_persistence_jpa
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }
    }
}

project(':cms-web') {
    apply plugin: 'war'
    dependencies {
        providedCompile project(':services')
        providedCompile fileTree(dir: 'WebContent/WEB-INF/lib')
        compile libs.spring_beans
        compile libs.spring_ldap
        compile libs.spring_security_acl
        compile libs.spring_security_aspects
        compile libs.spring_security_config
        compile libs.spring_security_ldap
        compile libs.spring_security_taglibs
        compile libs.spring_webmvc
        runtime libs.handlebars
        runtime libs.handlebars_springmvc
        runtime runtime_libs
    }
    webAppDirName = 'WebContent'

    task apiDocs(type: Javadoc) {
      source = sourceSets.main.allJava
      classpath += configurations.compile
      destinationDir = reporting.file('api-docs')
      options.optionFiles << file('javadoc.options')
    }
}

project(':cms-business-model') {
    apply plugin: 'com.github.jacobono.jaxb'
    apply plugin: 'java'
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
    compileJava.dependsOn xjc
    System.setProperty('javax.xml.accessExternalSchema', 'file')

    dependencies {
         jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.7'
         jaxb 'com.sun.xml.bind:jaxb-impl:2.2.7'
         jaxb 'javax.xml.bind:jaxb-api:2.2.7'
    }

    sourceSets {
        main {
            java {
                srcDirs = [
                    'src/main/java',
                    'src/main/generated'
                ]
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }
    }
    jaxb {
        xsdDir = 'cms-business-model/src/main/resources'
        bindingsDir = 'cms-business-model/src/main/resources'
        bindings = ['jaxb-bindings.xjb']
        xjc {
            producesDir = 'src/main/generated'
            destinationDir = 'src/main/generated'
            generatePackage = 'gov.medicaid.domain.model'
        }
    }
    clean {
        delete jaxb.xjc.destinationDir
        delete "${rootDir}/schema/"
    }
}

project(':cms-portal-services') {
    apply plugin: 'ear'
    dependencies {
        deploy project(path: ':cms-web', configuration: 'archives')
        deploy project(':cms-business-process')
        earlib fileTree(dir: 'lib')
        earlib libs.commons_codec
        earlib libs.commons_fileupload
        earlib libs.commons_io
        earlib libs.commons_lang
        earlib libs.commons_lang3
        earlib libs.hapi_fhir
        earlib libs.itext
        earlib libs.jasypt
        earlib libs.jbpm_human_task_core
        earlib libs.jbpm_persistence_jpa
        earlib libs.spring_beans
        earlib libs.spring_context
        earlib libs.spring_jdbc
        earlib libs.spring_ldap
        earlib libs.spring_security_acl
        earlib libs.spring_security_aspects
        earlib libs.spring_security_config
        earlib libs.spring_security_ldap
        earlib libs.spring_security_taglibs
        earlib libs.spring_webmvc
        earlib libs.velocity
        earlib project(path: ':cms-business-model', configuration: 'archives')
        earlib project(path: ':services', configuration: 'archives')
        earlib runtime_libs
   }

    ear {
        appDirName 'EarContent'
    }
}

project(':integration-tests') {
    apply plugin: 'java'
    apply plugin: 'net.serenity-bdd.aggregator'

    repositories {
        mavenCentral()
        maven { url 'http://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        testCompile "net.serenity-bdd:serenity-core:${serenity_version}"
        testCompile "net.serenity-bdd:serenity-junit:${serenity_version}"
        testCompile 'net.serenity-bdd:serenity-cucumber:1.1.35'
        testCompile 'junit:junit:4.12'
        testCompile 'org.assertj:assertj-core:3.8.0'
        testCompile runtime_libs
    }

    sourceSets {
        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }

    test {

        // Run sauce labs if it is configured
        if(System.getenv("SAUCE_USERNAME") != null) {
            // TODO: Platform, driver, and version can be env configurable
            systemProperty "webdriver.driver",  "chrome"
            systemProperty "saucelabs.url", "https://" + System.getenv("SAUCE_USERNAME") + ":" + System.getenv("SAUCE_ACCESS_KEY") + "@ondemand.saucelabs.com:443/wd/hub"
            systemProperty "saucelabs.target.platform", "MAC" // See: https://github.com/SeleniumHQ/selenium/blob/master/java/client/src/org/openqa/selenium/Platform.java
            systemProperty "saucelabs.driver.version", "60"
            systemProperty "saucelabs.access.key", System.getenv("SAUCE_ACCESS_KEY")
            systemProperty "saucelabs.user.id", System.getenv("SAUCE_USERNAME")

            if(System.getenv("TRAVIS_JOB_NUMBER") != null) {
                systemProperty "saucelabs.tunnel-identifier", System.getenv("TRAVIS_JOB_NUMBER")
            }
        }
    }
}

project(':userhelp') {
    apply plugin: BasePlugin

    ['epub', 'html', 'latex',].each { name ->
        task(
            name,
            group: 'Build',
            description: "Build user docs in ${name} format",
            type: kr.motd.gradle.sphinx.gradle.SphinxTask
        ) {
            sourceDirectory = 'source'
            outputDirectory = "build/${name}"
            builder = name
        }
    }

    task(
        'pdf',
        group: 'Build',
        description: "Build user docs in pdf format",
        type: Exec,
        dependsOn: latex
    ) {
        workingDir 'build/latex/'
        commandLine 'make'
    }

    task(
        'linkcheck',
        group: 'Verification',
        description: 'Check all external links for integrity',
        type: kr.motd.gradle.sphinx.gradle.SphinxTask
    ) {
        sourceDirectory = 'source'
        builder = 'linkcheck'
    }

    check.dependsOn linkcheck
    assemble.dependsOn html
}
